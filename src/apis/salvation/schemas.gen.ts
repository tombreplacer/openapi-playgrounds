// This file is auto-generated by @hey-api/openapi-ts

export const $ApiErrorResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $ApiSuccessResponse = {
    type: 'object',
    properties: {
        message: {
            type: 'string',
            nullable: true
        },
        details: {
            type: 'string',
            nullable: true
        }
    },
    additionalProperties: false
} as const;

export const $IPagingState = {
    required: ['hasNextPage', 'hasPreviousPage', 'indexFrom', 'pageIndex', 'pageSize', 'totalCount', 'totalPages'],
    type: 'object',
    properties: {
        indexFrom: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        pageIndex: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        pageSize: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        totalCount: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        totalPages: {
            type: 'integer',
            format: 'int32',
            readOnly: true
        },
        hasPreviousPage: {
            type: 'boolean',
            readOnly: true
        },
        hasNextPage: {
            type: 'boolean',
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $MiniatureImageDto = {
    required: ['author', 'imageMiniaturePillarboxedUri', 'imageMiniatureUri', 'imageSourceUri', 'title'],
    type: 'object',
    properties: {
        title: {
            minLength: 1,
            type: 'string'
        },
        author: {
            type: 'string',
            nullable: true
        },
        imageSourceUri: {
            minLength: 1,
            type: 'string'
        },
        imageMiniatureUri: {
            minLength: 1,
            type: 'string'
        },
        imageMiniaturePillarboxedUri: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $NewsCategoryListItemDto = {
    required: ['createdBy', 'createdOnUtc', 'filterVisible', 'id', 'itemsCount', 'mainPageBottomSlider', 'order', 'published', 'rightPanel', 'title', 'updatedBy', 'updatedOnUtc'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        itemsCount: {
            type: 'integer',
            format: 'int32'
        },
        createdBy: {
            minLength: 1,
            type: 'string'
        },
        updatedBy: {
            minLength: 1,
            type: 'string'
        },
        createdOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        updatedOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        mainPageBottomSlider: {
            type: 'boolean'
        },
        rightPanel: {
            type: 'boolean'
        },
        filterVisible: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsCategoryListItemDtoIPagedList = {
    required: ['items', 'state'],
    type: 'object',
    properties: {
        state: {
            '$ref': '#/components/schemas/IPagingState'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NewsCategoryListItemDto'
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NewsCategoryShortDto = {
    required: ['id', 'title'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $NewsListItemDto = {
    required: ['announcement', 'audioTagsCount', 'category', 'id', 'imagesCount', 'pageName', 'publishedOnUtc', 'tags', 'title', 'videoTagsCount', 'visitsCount'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        announcement: {
            minLength: 1,
            type: 'string'
        },
        miniature: {
            '$ref': '#/components/schemas/MiniatureImageDto'
        },
        category: {
            '$ref': '#/components/schemas/NewsCategoryShortDto'
        },
        tags: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NewsTagShortDto'
            }
        },
        signature: {
            '$ref': '#/components/schemas/NewsSignatureShortDto'
        },
        publishedOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        imagesCount: {
            type: 'integer',
            format: 'int32'
        },
        visitsCount: {
            type: 'integer',
            format: 'int32'
        },
        pageName: {
            minLength: 1,
            type: 'string'
        },
        videoTagsCount: {
            type: 'integer',
            format: 'int32'
        },
        audioTagsCount: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsListItemDtoIPagedList = {
    required: ['items', 'state'],
    type: 'object',
    properties: {
        state: {
            '$ref': '#/components/schemas/IPagingState'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NewsListItemDto'
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NewsSignatureCreateDto = {
    required: ['isVisibleInFilter', 'order', 'published', 'shortTitle', 'title'],
    type: 'object',
    properties: {
        title: {
            minLength: 1,
            type: 'string'
        },
        shortTitle: {
            minLength: 1,
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        isVisibleInFilter: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsSignatureListItemDto = {
    required: ['createdBy', 'createdOnUtc', 'filterVisible', 'id', 'itemsCount', 'order', 'published', 'title', 'updatedBy', 'updatedOnUtc'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        itemsCount: {
            type: 'integer',
            format: 'int32'
        },
        createdBy: {
            minLength: 1,
            type: 'string'
        },
        updatedBy: {
            minLength: 1,
            type: 'string'
        },
        createdOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        updatedOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        filterVisible: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsSignatureListItemDtoIPagedList = {
    required: ['items', 'state'],
    type: 'object',
    properties: {
        state: {
            '$ref': '#/components/schemas/IPagingState'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NewsSignatureListItemDto'
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NewsSignatureShortDto = {
    required: ['id', 'title'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $NewsSignatureUpdateDto = {
    required: ['id', 'isVisibleInFilter', 'order', 'published', 'shortTitle', 'title'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        shortTitle: {
            minLength: 1,
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        isVisibleInFilter: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsTagListItemDto = {
    required: ['createdBy', 'createdOnUtc', 'id', 'itemsCount', 'order', 'published', 'title', 'updatedBy', 'updatedOnUtc', 'visibleOnlyInside'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        },
        published: {
            type: 'boolean'
        },
        itemsCount: {
            type: 'integer',
            format: 'int32'
        },
        createdBy: {
            minLength: 1,
            type: 'string'
        },
        updatedBy: {
            minLength: 1,
            type: 'string'
        },
        createdOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        updatedOnUtc: {
            type: 'string',
            format: 'date-time'
        },
        visibleOnlyInside: {
            type: 'boolean'
        },
        order: {
            type: 'integer',
            format: 'int32'
        }
    },
    additionalProperties: false
} as const;

export const $NewsTagListItemDtoIPagedList = {
    required: ['items', 'state'],
    type: 'object',
    properties: {
        state: {
            '$ref': '#/components/schemas/IPagingState'
        },
        items: {
            type: 'array',
            items: {
                '$ref': '#/components/schemas/NewsTagListItemDto'
            },
            readOnly: true
        }
    },
    additionalProperties: false
} as const;

export const $NewsTagShortDto = {
    required: ['id', 'title'],
    type: 'object',
    properties: {
        id: {
            minLength: 1,
            type: 'string'
        },
        title: {
            minLength: 1,
            type: 'string'
        }
    },
    additionalProperties: false
} as const;

export const $QueryOrder = {
    enum: ['Title', 'PublishedOn', 'Random'],
    type: 'string'
} as const;

export const $QueryOrderDirection = {
    enum: ['Ascending', 'Descending'],
    type: 'string'
} as const;